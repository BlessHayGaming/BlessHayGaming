{"hash":"e486a5eb4ca0f0c3031a073ec840c4b429939d51","data":{"learnPost":{"id":"7d22487cbdb8ef0637f9758668d1b21d","title":"Multiple Parents(ish)","content":"<h2 id=\"problem\"><a href=\"#problem\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Problem</h2>\n<p>A question, which I have been asked multiple times concerning GameMaker, is “<em>how can I set two or more parent objects for my object?</em>” The answer, I typically answer, is “<em>you cannot</em>”, and for the longest of time I thought that to be how it is. But I recently figured out a darn simple way to <em>sorta</em> accomplish multiple parents for an object.</p>\n<p>I write sorta, because it only partially works: You can have an object <em>inherit code</em> from multiple objects, but you cannot have the object be <em>referred to</em> as multiple parent objects.</p>\n<h3 id=\"example\"><a href=\"#example\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Example</h3>\n<p>Say we have two parent objects: <em>obj_parent1</em> and <em>obj_parent2</em>, and an object, <em>obj_child</em>, set to be a child of obj_parent1. Normally obj_child would inherit the code from obj_parent1, and if you referred to obj_parent1 in a <strong>with</strong> statement, then instances of obj_child would be counted as instances of obj_parent1 as well.</p>\n<p>Using the simple method I am about to explain, obj_child can inherit the code from obj_parent2 as well, but if you refer to obj_parent2 in a <strong>with</strong> statement, then instances of obj_child will not be counted as instances of obj_parent2.</p>\n<h2 id=\"solution\"><a href=\"#solution\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Solution</h2>\n<p>When an object has a parent, and you wish to add code to an event in the child object, yet still have it inherit from the parent object, usually you would use <code>event_inherited();</code> before or after the added code in the child object. <a href=\"http://t.umblr.com/redirect?z=https%3A%2F%2Fdocs.yoyogames.com%2Fsource%2Fdadiospice%2F002_reference%2Fobjects%2520and%2520instances%2Fobjects%2Fgenerating%2520events%2Fevent_inherited.html&#x26;t=MzZhYTc1YmVlZDg1MzQzMjZjZGVjYWMxMGVlYzU4YjhkOGFhNWZhOCx4RmtoMDJhRw%3D%3D&#x26;b=t%3AYODUev04FkhIjsE6Bbxb8Q&#x26;p=http%3A%2F%2Flearn.blesshaygaming.com%2Fpost%2F146904217845%2Fmultiple-parentsish-in-gamemaker-studio&#x26;m=0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">From the manual:</a></p>\n<blockquote>\n<p><em>This function will call the current event of the parent object of the instance. […]</em></p>\n</blockquote>\n<p>To mimic this function but apply it with a secondary parent, we simply need to find a similar function, which can copy the currently executed event’s code but from another object of our choice. Luckily, <a href=\"http://t.umblr.com/redirect?z=https%3A%2F%2Fdocs.yoyogames.com%2Fsource%2Fdadiospice%2F002_reference%2Fobjects%2520and%2520instances%2Fobjects%2Fgenerating%2520events%2Fevent_perform_object.html&#x26;t=OWRhYmVjYTRmNzA2OTJmNWRkZTgzNWZiN2I4ZWZmNjQ2OWZkNWE2MSx4RmtoMDJhRw%3D%3D&#x26;b=t%3AYODUev04FkhIjsE6Bbxb8Q&#x26;p=http%3A%2F%2Flearn.blesshaygaming.com%2Fpost%2F146904217845%2Fmultiple-parentsish-in-gamemaker-studio&#x26;m=0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>event_perform_object();</code> does exactly that!</a>:</p>\n<blockquote>\n<p><em>This functions works the same as event_perform() except that this time you can specify events from another object. There are many options here which allow complete simulation of all possible events, […]</em></p>\n<p><em>NOTE: Actions in the event called with this function are applied to the current instance, and not to instances of the given object.</em></p>\n</blockquote>\n<p>We hit the jackpot! The function takes three arguments: The object to get the code from, the type of the chosen event (ex. ev_create or ev_step) and the number (sub-type) of the chosen event (ex. ev_step_normal or ev_step_end). Since we just want the currently executed event, we can use the built-in variables <a href=\"http://t.umblr.com/redirect?z=https%3A%2F%2Fdocs.yoyogames.com%2Fsource%2Fdadiospice%2F002_reference%2Fobjects%2520and%2520instances%2Fobjects%2Fgenerating%2520events%2Fevent_type.html&#x26;t=NTc3ZGQ5M2JhZjEzYzk5ZmQwZTIwMDQ4ODA2YWNjYzBmZDYyNGM3NCx4RmtoMDJhRw%3D%3D&#x26;b=t%3AYODUev04FkhIjsE6Bbxb8Q&#x26;p=http%3A%2F%2Flearn.blesshaygaming.com%2Fpost%2F146904217845%2Fmultiple-parentsish-in-gamemaker-studio&#x26;m=0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>event_type</em></a> and <a href=\"http://t.umblr.com/redirect?z=https%3A%2F%2Fdocs.yoyogames.com%2Fsource%2Fdadiospice%2F002_reference%2Fobjects%2520and%2520instances%2Fobjects%2Fgenerating%2520events%2Fevent_number.html&#x26;t=MzUzNjE3Y2MxY2E4ZDE3Y2RmYzE3OThjY2ZiYjIwYTBjYjEyMWNkMCx4RmtoMDJhRw%3D%3D&#x26;b=t%3AYODUev04FkhIjsE6Bbxb8Q&#x26;p=http%3A%2F%2Flearn.blesshaygaming.com%2Fpost%2F146904217845%2Fmultiple-parentsish-in-gamemaker-studio&#x26;m=0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>event_number</em></a> to fill out the second and third argument, and all we are left with doing is select which object we want to ‘inherit’ from.</p>\n<p>So: For our previous example, we want to put <code>event_perform_object(obj_parent2, event_type, event_number);</code> in all the events of obj_child, in which we want to inherit from obj_parent2. The events in obj_child could then look something like this:</p>\n<pre><code class=\"language-gml\">event_inherited(); //Inheriting from obj_parent1\nevent_perform_object(obj_parent2, event_type, event_number);\n</code></pre>\n<p>But be mindful! The code will run in the order you type it in, so if obj_parent1 contains code to apply movement, but obj_parent2 contains code for setting the movement, you would probably want to inherit from obj_parent2 first.</p>\n<h3 id=\"extended-usage-prototypes-and-state-machines\"><a href=\"#extended-usage-prototypes-and-state-machines\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Extended Usage: Prototypes and State Machines</h3>\n<p>Another word, we could use instead of a secondary object, is the term <em>prototype</em>. This term covers objects, which will never actually be created in your game, but which contains code you need in other objects. An example usage of this could be for <a href=\"https://www.youtube.com/watch?v=QSjDkpqZUSM\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">state machines</a>. Here you could make a prototype object for each state (in this case we will just make a simple, general state machine, differentiating between being grounded, being in water, and being in the air):</p>\n<blockquote>\n<p>obj_player : The object using the state machine.\nproto_obj_on_ground : The player when on the ground.\nproto_obj_in_air : The player when in the air.\nproto_obj_in_water : The player when in water.</p>\n</blockquote>\n<p>The step event for obj_player could then be as follows:</p>\n<pre><code class=\"language-gml\">var __obj = noone;\nif place_meeting(x, y, obj_water) {\n __obj = proto_obj_in_water;\n} else if place_meeting(x, y+1, par_solid) {\n __obj = proto_obj_on_ground;\n} else {\n __obj = proto_obj_in_air;\n}\n\nevent_perform_object(__obj, event_type, event_number);\n</code></pre>\n<p>Even better: Other objects such as enemies can access the same prototypes, thus you don't have to repeat the same code across multiple objects!</p>\n<h4 id=\"why-not-just-use-scripts\"><a href=\"#why-not-just-use-scripts\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Why Not Just Use Scripts?</h4>\n<p>Yes, you can do the same thing with scripts, I am not going to lie. Prototype objects are simply another place to put the code, and assuming you need different code for multiple different events, I (sometimes) prefer having it all gathered in an object, rather than using 4-5 different scripts. However, it all come down to preferences.</p>\n<p>Anyway, that's all for this time. Hope you enjoyed this tutorial!</p>\n<p>Kind regards,<br>\nSimon</p>\n"}},"context":{}}